[gcode_macro G29]
gcode:
  ;BED_MESH_CALIBRATE
  BED_MESH_PROFILE LOAD=default

# In PrusaSlicer/SuperSlicer, set Custom G-codes:
#   - Start G-code: `START_PRINT BED_TEMP={first_layer_bed_temperature} EXTRUDER_TEMP={first_layer_temperature}`
#   - End G-code: `END_PRINT`
#   - Check 'Only custom Start G-code' (eliminates wait for temperature after prime line was drawn)
[gcode_macro START_PRINT]
gcode:
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
  G90 ; use absolute coordinates
  M83 ; extruder relative mode
  M140 S{BED_TEMP}; set final bed temp
  {% if printer.extruder.target < 150 %}
    M104 S150 ; set temporary nozzle temp to prevent oozing during homing and auto bed leveling
  {% endif %}
  G4 S10 ; allow partial nozzle warmup
  G28 ; home all axis
  VALIDATE_BED
  G29 ; bed mesh
  G1 Z20 F240
  G1 X110 Y225 F3000
  M104 S{EXTRUDER_TEMP} ; set final nozzle temp
  M190 S{BED_TEMP} ; wait for bed temp to stabilize
  M109 S{EXTRUDER_TEMP} ; wait for nozzle temp to stabilize
  G1 X2 Y10 F3000
  G1 Z0.28 F240
  G92 E0
  G1 Y140 E10 F1500 ; prime the nozzle
  G1 X2.3 F5000
  G92 E0
  G1 Y10 E10 F1200 ; prime the nozzle
  G92 E0 ; reset extruder

  # BEGIN superslicer
  G21 ; set units to millimeters
  G90 ; use absolute coordinates
  M82 ; use absolute distances for extrusion
  M107 ; fans off
  G92 E0
  # END superslicer

  SKEW_PROFILE LOAD=my_skew_profile


[gcode_macro END_PRINT]
gcode:
  # Turn off bed, extruder, and fan
  M140 S0
  M104 S0
  M106 S0
  # Move nozzle away from print while retracting
  SET_SKEW CLEAR=1
  G91
  G1 X-2 Y-2 E-3 F300
  # Raise nozzle by 10mm
  G1 Z10 F3000
  # Move to rear
  G90
  G1 X110 Y225 F3000
  # Disable steppers
  M84

[gcode_macro HOME]
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}

[gcode_macro VALIDATE_BED]
gcode:
  HOME
  SCREWS_TILT_CALCULATE MAX_DEVIATION=0.015 ; validate bed screws


[gcode_macro POWER_OFF_PRINTER]
gcode:
  {action_call_remote_method("set_device_power",
                             device="mqtt_plug",
                             state="off")}

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
  {% endif %}

